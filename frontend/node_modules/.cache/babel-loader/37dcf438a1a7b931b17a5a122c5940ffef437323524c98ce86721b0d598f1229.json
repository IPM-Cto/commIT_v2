{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\muletto1\\\\WebstormProjects\\\\commIT_v2\\\\frontend\\\\src\\\\contexts\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport const useChat = () => {\n  _s();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    getAccessTokenSilently\n  } = useAuth0();\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const startNewSession = async () => {\n    try {\n      setLoading(true);\n      const token = await getAccessTokenSilently();\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/chat/start`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const newSession = response.data;\n      setSessions(prev => [...prev, newSession]);\n      setCurrentSession(newSession.session_id);\n      setMessages([]);\n      return newSession;\n    } catch (error) {\n      console.error('Error starting chat session:', error);\n      toast.error('Errore nell\\'avvio della chat');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sendMessage = async (message, sessionId = currentSession) => {\n    if (!sessionId) {\n      const session = await startNewSession();\n      sessionId = session.session_id;\n    }\n    try {\n      setLoading(true);\n      const token = await getAccessTokenSilently();\n\n      // Add user message to UI immediately\n      const userMessage = {\n        role: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, userMessage]);\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/chat/message`, {\n        session_id: sessionId,\n        message: message\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const aiResponse = response.data.response;\n\n      // Add AI response to messages\n      const assistantMessage = {\n        role: 'assistant',\n        content: aiResponse.content,\n        timestamp: new Date(),\n        intent: aiResponse.intent,\n        suggested_actions: aiResponse.suggested_actions,\n        suggested_providers: aiResponse.suggested_providers\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n      return aiResponse;\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      // Add error message\n      const errorMessage = {\n        role: 'assistant',\n        content: 'Mi dispiace, si è verificato un errore. Riprova tra poco.',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      toast.error('Errore nell\\'invio del messaggio');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadChatHistory = async sessionId => {\n    try {\n      setLoading(true);\n      const token = await getAccessTokenSilently();\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/chat/history/${sessionId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMessages(response.data.messages);\n      setCurrentSession(sessionId);\n      return response.data.messages;\n    } catch (error) {\n      console.error('Error loading chat history:', error);\n      toast.error('Errore nel caricamento della cronologia');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const clearChat = () => {\n    setMessages([]);\n    setCurrentSession(null);\n  };\n  const deleteSession = async sessionId => {\n    try {\n      const token = await getAccessTokenSilently();\n      await axios.delete(`${process.env.REACT_APP_API_URL}/chat/sessions/${sessionId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setSessions(prev => prev.filter(s => s.session_id !== sessionId));\n      if (currentSession === sessionId) {\n        clearChat();\n      }\n      toast.success('Sessione eliminata');\n    } catch (error) {\n      console.error('Error deleting session:', error);\n      toast.error('Errore nell\\'eliminazione della sessione');\n      throw error;\n    }\n  };\n  const value = {\n    sessions,\n    currentSession,\n    messages,\n    loading,\n    startNewSession,\n    sendMessage,\n    loadChatHistory,\n    clearChat,\n    deleteSession\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 10\n  }, this);\n};\n_s2(ChatProvider, \"h8sRhbPDn5a+97vPygEkt9K2h6s=\", false, function () {\n  return [useAuth0];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useAuth0","axios","toast","jsxDEV","_jsxDEV","ChatContext","useChat","_s","context","Error","ChatProvider","children","_s2","getAccessTokenSilently","sessions","setSessions","currentSession","setCurrentSession","messages","setMessages","loading","setLoading","startNewSession","token","response","post","process","env","REACT_APP_API_URL","headers","Authorization","newSession","data","prev","session_id","error","console","sendMessage","message","sessionId","session","userMessage","role","content","timestamp","Date","aiResponse","assistantMessage","intent","suggested_actions","suggested_providers","errorMessage","isError","loadChatHistory","get","clearChat","deleteSession","delete","filter","s","success","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/muletto1/WebstormProjects/commIT_v2/frontend/src/contexts/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\n\nconst ChatContext = createContext();\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\nexport const ChatProvider = ({ children }) => {\n  const { getAccessTokenSilently } = useAuth0();\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const startNewSession = async () => {\n    try {\n      setLoading(true);\n      const token = await getAccessTokenSilently();\n      \n      const response = await axios.post(\n        `${process.env.REACT_APP_API_URL}/chat/start`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      \n      const newSession = response.data;\n      setSessions(prev => [...prev, newSession]);\n      setCurrentSession(newSession.session_id);\n      setMessages([]);\n      \n      return newSession;\n    } catch (error) {\n      console.error('Error starting chat session:', error);\n      toast.error('Errore nell\\'avvio della chat');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendMessage = async (message, sessionId = currentSession) => {\n    if (!sessionId) {\n      const session = await startNewSession();\n      sessionId = session.session_id;\n    }\n    \n    try {\n      setLoading(true);\n      const token = await getAccessTokenSilently();\n      \n      // Add user message to UI immediately\n      const userMessage = {\n        role: 'user',\n        content: message,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, userMessage]);\n      \n      const response = await axios.post(\n        `${process.env.REACT_APP_API_URL}/chat/message`,\n        {\n          session_id: sessionId,\n          message: message,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      \n      const aiResponse = response.data.response;\n      \n      // Add AI response to messages\n      const assistantMessage = {\n        role: 'assistant',\n        content: aiResponse.content,\n        timestamp: new Date(),\n        intent: aiResponse.intent,\n        suggested_actions: aiResponse.suggested_actions,\n        suggested_providers: aiResponse.suggested_providers,\n      };\n      \n      setMessages(prev => [...prev, assistantMessage]);\n      \n      return aiResponse;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      \n      // Add error message\n      const errorMessage = {\n        role: 'assistant',\n        content: 'Mi dispiace, si è verificato un errore. Riprova tra poco.',\n        timestamp: new Date(),\n        isError: true,\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      \n      toast.error('Errore nell\\'invio del messaggio');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadChatHistory = async (sessionId) => {\n    try {\n      setLoading(true);\n      const token = await getAccessTokenSilently();\n      \n      const response = await axios.get(\n        `${process.env.REACT_APP_API_URL}/chat/history/${sessionId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      \n      setMessages(response.data.messages);\n      setCurrentSession(sessionId);\n      \n      return response.data.messages;\n    } catch (error) {\n      console.error('Error loading chat history:', error);\n      toast.error('Errore nel caricamento della cronologia');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearChat = () => {\n    setMessages([]);\n    setCurrentSession(null);\n  };\n\n  const deleteSession = async (sessionId) => {\n    try {\n      const token = await getAccessTokenSilently();\n      \n      await axios.delete(\n        `${process.env.REACT_APP_API_URL}/chat/sessions/${sessionId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      \n      setSessions(prev => prev.filter(s => s.session_id !== sessionId));\n      \n      if (currentSession === sessionId) {\n        clearChat();\n      }\n      \n      toast.success('Sessione eliminata');\n    } catch (error) {\n      console.error('Error deleting session:', error);\n      toast.error('Errore nell\\'eliminazione della sessione');\n      throw error;\n    }\n  };\n\n  const value = {\n    sessions,\n    currentSession,\n    messages,\n    loading,\n    startNewSession,\n    sendMessage,\n    loadChatHistory,\n    clearChat,\n    deleteSession,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}