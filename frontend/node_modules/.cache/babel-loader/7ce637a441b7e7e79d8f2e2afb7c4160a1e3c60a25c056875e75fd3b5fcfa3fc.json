{"ast":null,"code":"// üîê AuthService - Servizio centralizzato per autenticazione\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v2';\n\n// Axios instance con configurazione\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor per aggiungere token\napi.interceptors.request.use(config => {\n  const token = AuthService.getAccessToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor per gestire errori e refresh token\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Se 401 e non √® gi√† un retry, prova refresh token\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = AuthService.getRefreshToken();\n      if (refreshToken) {\n        const {\n          data\n        } = await axios.post(`${API_URL}/auth/refresh`, {\n          refresh_token: refreshToken\n        });\n\n        // Salva nuovo access token\n        AuthService.setAccessToken(data.access_token);\n\n        // Riprova richiesta originale\n        originalRequest.headers.Authorization = `Bearer ${data.access_token}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh fallito, logout\n      AuthService.logout();\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nclass AuthService {\n  // ==================== TOKEN MANAGEMENT ====================\n\n  static getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n  static setAccessToken(token) {\n    localStorage.setItem('access_token', token);\n  }\n  static getRefreshToken() {\n    return localStorage.getItem('refresh_token');\n  }\n  static setRefreshToken(token) {\n    localStorage.setItem('refresh_token', token);\n  }\n  static removeTokens() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n\n  // ==================== USER DATA ====================\n\n  static getUserData() {\n    const data = localStorage.getItem('user_data');\n    return data ? JSON.parse(data) : null;\n  }\n  static setUserData(user) {\n    localStorage.setItem('user_data', JSON.stringify(user));\n  }\n  static removeUserData() {\n    localStorage.removeItem('user_data');\n  }\n\n  // ==================== AUTH OPERATIONS ====================\n\n  /**\n   * Registrazione nuovo utente\n   */\n  static async register(userData) {\n    try {\n      console.log('üìù Registrazione utente:', userData.email);\n      const response = await api.post('/auth/register', userData);\n      if (response.data.success) {\n        const {\n          user,\n          tokens\n        } = response.data;\n\n        // Salva tokens e user data\n        this.setAccessToken(tokens.access_token);\n        this.setRefreshToken(tokens.refresh_token);\n        this.setUserData(user);\n        console.log('‚úÖ Registrazione successful');\n        return {\n          success: true,\n          user,\n          tokens\n        };\n      }\n      return {\n        success: false,\n        error: 'Registrazione fallita'\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('‚ùå Errore registrazione:', error);\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message\n      };\n    }\n  }\n\n  /**\n   * Login utente\n   */\n  static async login(email, password) {\n    try {\n      console.log('üîë Login utente:', email);\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data.success) {\n        const {\n          user,\n          tokens\n        } = response.data;\n\n        // Salva tokens e user data\n        this.setAccessToken(tokens.access_token);\n        this.setRefreshToken(tokens.refresh_token);\n        this.setUserData(user);\n        console.log('‚úÖ Login successful');\n        return {\n          success: true,\n          user,\n          tokens\n        };\n      }\n      return {\n        success: false,\n        error: 'Login fallito'\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('‚ùå Errore login:', error);\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Email o password errati'\n      };\n    }\n  }\n\n  /**\n   * Logout utente\n   */\n  static async logout() {\n    try {\n      console.log('üö™ Logout utente');\n\n      // Chiama endpoint logout (opzionale con JWT stateless)\n      try {\n        await api.post('/auth/logout');\n      } catch (e) {\n        // Ignora errori, continua con logout locale\n      }\n\n      // Rimuovi tutto dal localStorage\n      this.removeTokens();\n      this.removeUserData();\n      console.log('‚úÖ Logout successful');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('‚ùå Errore logout:', error);\n      // Rimuovi comunque i dati locali\n      this.removeTokens();\n      this.removeUserData();\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Ottieni dati utente corrente dal server\n   */\n  static async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      if (response.data.success) {\n        const user = response.data.user;\n\n        // Aggiorna localStorage\n        this.setUserData(user);\n        return {\n          success: true,\n          user\n        };\n      }\n      return {\n        success: false,\n        error: 'Utente non trovato'\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('‚ùå Errore get current user:', error);\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message\n      };\n    }\n  }\n\n  /**\n   * Aggiorna profilo utente\n   */\n  static async updateProfile(updates) {\n    try {\n      console.log('‚úèÔ∏è Aggiornamento profilo');\n      const response = await api.put('/auth/profile', updates);\n      if (response.data.success) {\n        const user = response.data.user;\n\n        // Aggiorna localStorage\n        this.setUserData(user);\n        console.log('‚úÖ Profilo aggiornato');\n        return {\n          success: true,\n          user\n        };\n      }\n      return {\n        success: false,\n        error: 'Aggiornamento fallito'\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('‚ùå Errore aggiornamento profilo:', error);\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || error.message\n      };\n    }\n  }\n\n  /**\n   * Cambia password\n   */\n  static async changePassword(oldPassword, newPassword) {\n    try {\n      console.log('üîí Cambio password');\n      const response = await api.post('/auth/change-password', {\n        old_password: oldPassword,\n        new_password: newPassword\n      });\n      if (response.data.success) {\n        console.log('‚úÖ Password cambiata');\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: 'Cambio password fallito'\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('‚ùå Errore cambio password:', error);\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || error.message\n      };\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  static async refreshAccessToken() {\n    try {\n      const refreshToken = this.getRefreshToken();\n      if (!refreshToken) {\n        return {\n          success: false,\n          error: 'No refresh token'\n        };\n      }\n      const response = await axios.post(`${API_URL}/auth/refresh`, {\n        refresh_token: refreshToken\n      });\n      if (response.data.success) {\n        this.setAccessToken(response.data.access_token);\n        return {\n          success: true,\n          token: response.data.access_token\n        };\n      }\n      return {\n        success: false,\n        error: 'Refresh fallito'\n      };\n    } catch (error) {\n      console.error('‚ùå Errore refresh token:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // ==================== VALIDATION ====================\n\n  /**\n   * Verifica se utente √® autenticato\n   */\n  static isAuthenticated() {\n    const token = this.getAccessToken();\n    const user = this.getUserData();\n    return !!(token && user);\n  }\n\n  /**\n   * Verifica se utente √® customer\n   */\n  static isCustomer() {\n    const user = this.getUserData();\n    return (user === null || user === void 0 ? void 0 : user.user_type) === 'customer';\n  }\n\n  /**\n   * Verifica se utente √® provider\n   */\n  static isProvider() {\n    const user = this.getUserData();\n    return (user === null || user === void 0 ? void 0 : user.user_type) === 'provider';\n  }\n\n  /**\n   * Verifica se utente √® admin\n   */\n  static isAdmin() {\n    const user = this.getUserData();\n    return (user === null || user === void 0 ? void 0 : user.user_type) === 'admin';\n  }\n\n  /**\n   * Ottieni tipo utente\n   */\n  static getUserType() {\n    const user = this.getUserData();\n    return (user === null || user === void 0 ? void 0 : user.user_type) || null;\n  }\n\n  // ==================== PASSWORD VALIDATION ====================\n\n  /**\n   * Valida forza password\n   */\n  static validatePassword(password) {\n    const errors = [];\n    if (password.length < 8) {\n      errors.push('Password deve essere almeno 8 caratteri');\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password deve contenere almeno una maiuscola');\n    }\n    if (!/[a-z]/.test(password)) {\n      errors.push('Password deve contenere almeno una minuscola');\n    }\n    if (!/[0-9]/.test(password)) {\n      errors.push('Password deve contenere almeno un numero');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Calcola forza password (0-100)\n   */\n  static getPasswordStrength(password) {\n    let strength = 0;\n    if (password.length >= 8) strength += 25;\n    if (password.length >= 12) strength += 15;\n    if (/[a-z]/.test(password)) strength += 15;\n    if (/[A-Z]/.test(password)) strength += 15;\n    if (/[0-9]/.test(password)) strength += 15;\n    if (/[^A-Za-z0-9]/.test(password)) strength += 15;\n    return Math.min(strength, 100);\n  }\n}\n\n// Export axios instance per altre chiamate API\nexport { api };\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","AuthService","getAccessToken","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","getRefreshToken","data","post","refresh_token","setAccessToken","access_token","refreshError","logout","window","location","href","localStorage","getItem","setItem","setRefreshToken","removeTokens","removeItem","getUserData","JSON","parse","setUserData","user","stringify","removeUserData","register","userData","console","log","email","success","tokens","_error$response2","_error$response2$data","message","login","password","_error$response3","_error$response3$data","e","getCurrentUser","get","_error$response4","_error$response4$data","updateProfile","updates","put","_error$response5","_error$response5$data","changePassword","oldPassword","newPassword","old_password","new_password","_error$response6","_error$response6$data","refreshAccessToken","isAuthenticated","isCustomer","user_type","isProvider","isAdmin","getUserType","validatePassword","errors","length","push","test","isValid","getPasswordStrength","strength","Math","min"],"sources":["C:/Users/muletto1/WebstormProjects/commIT_v2/frontend/src/services/AuthService.js"],"sourcesContent":["// üîê AuthService - Servizio centralizzato per autenticazione\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v2';\n\n// Axios instance con configurazione\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor per aggiungere token\napi.interceptors.request.use(\n  (config) => {\n    const token = AuthService.getAccessToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor per gestire errori e refresh token\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    // Se 401 e non √® gi√† un retry, prova refresh token\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = AuthService.getRefreshToken();\n        if (refreshToken) {\n          const { data } = await axios.post(`${API_URL}/auth/refresh`, {\n            refresh_token: refreshToken,\n          });\n\n          // Salva nuovo access token\n          AuthService.setAccessToken(data.access_token);\n\n          // Riprova richiesta originale\n          originalRequest.headers.Authorization = `Bearer ${data.access_token}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh fallito, logout\n        AuthService.logout();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nclass AuthService {\n  // ==================== TOKEN MANAGEMENT ====================\n\n  static getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  static setAccessToken(token) {\n    localStorage.setItem('access_token', token);\n  }\n\n  static getRefreshToken() {\n    return localStorage.getItem('refresh_token');\n  }\n\n  static setRefreshToken(token) {\n    localStorage.setItem('refresh_token', token);\n  }\n\n  static removeTokens() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n\n  // ==================== USER DATA ====================\n\n  static getUserData() {\n    const data = localStorage.getItem('user_data');\n    return data ? JSON.parse(data) : null;\n  }\n\n  static setUserData(user) {\n    localStorage.setItem('user_data', JSON.stringify(user));\n  }\n\n  static removeUserData() {\n    localStorage.removeItem('user_data');\n  }\n\n  // ==================== AUTH OPERATIONS ====================\n\n  /**\n   * Registrazione nuovo utente\n   */\n  static async register(userData) {\n    try {\n      console.log('üìù Registrazione utente:', userData.email);\n\n      const response = await api.post('/auth/register', userData);\n\n      if (response.data.success) {\n        const { user, tokens } = response.data;\n\n        // Salva tokens e user data\n        this.setAccessToken(tokens.access_token);\n        this.setRefreshToken(tokens.refresh_token);\n        this.setUserData(user);\n\n        console.log('‚úÖ Registrazione successful');\n\n        return { success: true, user, tokens };\n      }\n\n      return { success: false, error: 'Registrazione fallita' };\n    } catch (error) {\n      console.error('‚ùå Errore registrazione:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || error.message,\n      };\n    }\n  }\n\n  /**\n   * Login utente\n   */\n  static async login(email, password) {\n    try {\n      console.log('üîë Login utente:', email);\n\n      const response = await api.post('/auth/login', { email, password });\n\n      if (response.data.success) {\n        const { user, tokens } = response.data;\n\n        // Salva tokens e user data\n        this.setAccessToken(tokens.access_token);\n        this.setRefreshToken(tokens.refresh_token);\n        this.setUserData(user);\n\n        console.log('‚úÖ Login successful');\n\n        return { success: true, user, tokens };\n      }\n\n      return { success: false, error: 'Login fallito' };\n    } catch (error) {\n      console.error('‚ùå Errore login:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Email o password errati',\n      };\n    }\n  }\n\n  /**\n   * Logout utente\n   */\n  static async logout() {\n    try {\n      console.log('üö™ Logout utente');\n\n      // Chiama endpoint logout (opzionale con JWT stateless)\n      try {\n        await api.post('/auth/logout');\n      } catch (e) {\n        // Ignora errori, continua con logout locale\n      }\n\n      // Rimuovi tutto dal localStorage\n      this.removeTokens();\n      this.removeUserData();\n\n      console.log('‚úÖ Logout successful');\n\n      return { success: true };\n    } catch (error) {\n      console.error('‚ùå Errore logout:', error);\n      // Rimuovi comunque i dati locali\n      this.removeTokens();\n      this.removeUserData();\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Ottieni dati utente corrente dal server\n   */\n  static async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n\n      if (response.data.success) {\n        const user = response.data.user;\n\n        // Aggiorna localStorage\n        this.setUserData(user);\n\n        return { success: true, user };\n      }\n\n      return { success: false, error: 'Utente non trovato' };\n    } catch (error) {\n      console.error('‚ùå Errore get current user:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || error.message,\n      };\n    }\n  }\n\n  /**\n   * Aggiorna profilo utente\n   */\n  static async updateProfile(updates) {\n    try {\n      console.log('‚úèÔ∏è Aggiornamento profilo');\n\n      const response = await api.put('/auth/profile', updates);\n\n      if (response.data.success) {\n        const user = response.data.user;\n\n        // Aggiorna localStorage\n        this.setUserData(user);\n\n        console.log('‚úÖ Profilo aggiornato');\n\n        return { success: true, user };\n      }\n\n      return { success: false, error: 'Aggiornamento fallito' };\n    } catch (error) {\n      console.error('‚ùå Errore aggiornamento profilo:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || error.message,\n      };\n    }\n  }\n\n  /**\n   * Cambia password\n   */\n  static async changePassword(oldPassword, newPassword) {\n    try {\n      console.log('üîí Cambio password');\n\n      const response = await api.post('/auth/change-password', {\n        old_password: oldPassword,\n        new_password: newPassword,\n      });\n\n      if (response.data.success) {\n        console.log('‚úÖ Password cambiata');\n        return { success: true };\n      }\n\n      return { success: false, error: 'Cambio password fallito' };\n    } catch (error) {\n      console.error('‚ùå Errore cambio password:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || error.message,\n      };\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  static async refreshAccessToken() {\n    try {\n      const refreshToken = this.getRefreshToken();\n\n      if (!refreshToken) {\n        return { success: false, error: 'No refresh token' };\n      }\n\n      const response = await axios.post(`${API_URL}/auth/refresh`, {\n        refresh_token: refreshToken,\n      });\n\n      if (response.data.success) {\n        this.setAccessToken(response.data.access_token);\n        return { success: true, token: response.data.access_token };\n      }\n\n      return { success: false, error: 'Refresh fallito' };\n    } catch (error) {\n      console.error('‚ùå Errore refresh token:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ==================== VALIDATION ====================\n\n  /**\n   * Verifica se utente √® autenticato\n   */\n  static isAuthenticated() {\n    const token = this.getAccessToken();\n    const user = this.getUserData();\n    return !!(token && user);\n  }\n\n  /**\n   * Verifica se utente √® customer\n   */\n  static isCustomer() {\n    const user = this.getUserData();\n    return user?.user_type === 'customer';\n  }\n\n  /**\n   * Verifica se utente √® provider\n   */\n  static isProvider() {\n    const user = this.getUserData();\n    return user?.user_type === 'provider';\n  }\n\n  /**\n   * Verifica se utente √® admin\n   */\n  static isAdmin() {\n    const user = this.getUserData();\n    return user?.user_type === 'admin';\n  }\n\n  /**\n   * Ottieni tipo utente\n   */\n  static getUserType() {\n    const user = this.getUserData();\n    return user?.user_type || null;\n  }\n\n  // ==================== PASSWORD VALIDATION ====================\n\n  /**\n   * Valida forza password\n   */\n  static validatePassword(password) {\n    const errors = [];\n\n    if (password.length < 8) {\n      errors.push('Password deve essere almeno 8 caratteri');\n    }\n\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password deve contenere almeno una maiuscola');\n    }\n\n    if (!/[a-z]/.test(password)) {\n      errors.push('Password deve contenere almeno una minuscola');\n    }\n\n    if (!/[0-9]/.test(password)) {\n      errors.push('Password deve contenere almeno un numero');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Calcola forza password (0-100)\n   */\n  static getPasswordStrength(password) {\n    let strength = 0;\n\n    if (password.length >= 8) strength += 25;\n    if (password.length >= 12) strength += 15;\n    if (/[a-z]/.test(password)) strength += 15;\n    if (/[A-Z]/.test(password)) strength += 15;\n    if (/[0-9]/.test(password)) strength += 15;\n    if (/[^A-Za-z0-9]/.test(password)) strength += 15;\n\n    return Math.min(strength, 100);\n  }\n}\n\n// Export axios instance per altre chiamate API\nexport { api };\n\nexport default AuthService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}